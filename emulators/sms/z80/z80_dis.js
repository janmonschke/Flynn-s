
function disassemble(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="NOP";
break;
case 0x01: res="LD";
res += " BC," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x02: res="LD";
res += " (BC),A";
break;
case 0x03: res="INC";
res += " BC";
break;
case 0x04: res="INC";
res += " B";
break;
case 0x05: res="DEC";
res += " B";
break;
case 0x06: res="LD";
res += " B,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x07: res="RLCA";
break;
case 0x08: res="EX";
res += " AF,AF'";
break;
case 0x09: res="ADD";
res += " HL,BC";
break;
case 0x0a: res="LD";
res += " A,(BC)";
break;
case 0x0b: res="DEC";
res += " BC";
break;
case 0x0c: res="INC";
res += " C";
break;
case 0x0d: res="DEC";
res += " C";
break;
case 0x0e: res="LD";
res += " C,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x0f: res="RRCA";
break;
case 0x10: res="DJNZ";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " " + addressHtml(reladdr) + ""; address += 1;
break;
case 0x11: res="LD";
res += " DE," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x12: res="LD";
res += " (DE),A";
break;
case 0x13: res="INC";
res += " DE";
break;
case 0x14: res="INC";
res += " D";
break;
case 0x15: res="DEC";
res += " D";
break;
case 0x16: res="LD";
res += " D,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x17: res="RLA";
break;
case 0x18: res="JR";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " " + addressHtml(reladdr) + ""; address += 1;
break;
case 0x19: res="ADD";
res += " HL,DE";
break;
case 0x1a: res="LD";
res += " A,(DE)";
break;
case 0x1b: res="DEC";
res += " DE";
break;
case 0x1c: res="INC";
res += " E";
break;
case 0x1d: res="DEC";
res += " E";
break;
case 0x1e: res="LD";
res += " E,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x1f: res="RRA";
break;
case 0x20: res="JR";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " NZ," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x21: res="LD";
res += " HL," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),HL"; address += 2;
break;
case 0x23: res="INC";
res += " HL";
break;
case 0x24: res="INC";
res += " H";
break;
case 0x25: res="DEC";
res += " H";
break;
case 0x26: res="LD";
res += " H,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x27: res="DAA";
break;
case 0x28: res="JR";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " Z," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x29: res="ADD";
res += " HL,HL";
break;
case 0x2a: res="LD";
res += " HL,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="DEC";
res += " HL";
break;
case 0x2c: res="INC";
res += " L";
break;
case 0x2d: res="DEC";
res += " L";
break;
case 0x2e: res="LD";
res += " L,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x2f: res="CPL";
break;
case 0x30: res="JR";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " NC," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x31: res="LD";
res += " SP," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x32: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),A"; address += 2;
break;
case 0x33: res="INC";
res += " SP";
break;
case 0x34: res="INC";
res += " (HL)";
break;
case 0x35: res="DEC";
res += " (HL)";
break;
case 0x36: res="LD";
res += " (HL),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x37: res="SCF";
break;
case 0x38: res="JR";
var reladdr = address + 1 + sign_extend(readbyte(address));
res += " C," + addressHtml(reladdr) + ""; address += 1;
break;
case 0x39: res="ADD";
res += " HL,SP";
break;
case 0x3a: res="LD";
res += " A,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x3b: res="DEC";
res += " SP";
break;
case 0x3c: res="INC";
res += " A";
break;
case 0x3d: res="DEC";
res += " A";
break;
case 0x3e: res="LD";
res += " A,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x3f: res="CCF";
break;
case 0x40: res="LD";
res += " B,B";
break;
case 0x41: res="LD";
res += " B,C";
break;
case 0x42: res="LD";
res += " B,D";
break;
case 0x43: res="LD";
res += " B,E";
break;
case 0x44: res="LD";
res += " B,H";
break;
case 0x45: res="LD";
res += " B,L";
break;
case 0x46: res="LD";
res += " B,(HL)";
break;
case 0x47: res="LD";
res += " B,A";
break;
case 0x48: res="LD";
res += " C,B";
break;
case 0x49: res="LD";
res += " C,C";
break;
case 0x4a: res="LD";
res += " C,D";
break;
case 0x4b: res="LD";
res += " C,E";
break;
case 0x4c: res="LD";
res += " C,H";
break;
case 0x4d: res="LD";
res += " C,L";
break;
case 0x4e: res="LD";
res += " C,(HL)";
break;
case 0x4f: res="LD";
res += " C,A";
break;
case 0x50: res="LD";
res += " D,B";
break;
case 0x51: res="LD";
res += " D,C";
break;
case 0x52: res="LD";
res += " D,D";
break;
case 0x53: res="LD";
res += " D,E";
break;
case 0x54: res="LD";
res += " D,H";
break;
case 0x55: res="LD";
res += " D,L";
break;
case 0x56: res="LD";
res += " D,(HL)";
break;
case 0x57: res="LD";
res += " D,A";
break;
case 0x58: res="LD";
res += " E,B";
break;
case 0x59: res="LD";
res += " E,C";
break;
case 0x5a: res="LD";
res += " E,D";
break;
case 0x5b: res="LD";
res += " E,E";
break;
case 0x5c: res="LD";
res += " E,H";
break;
case 0x5d: res="LD";
res += " E,L";
break;
case 0x5e: res="LD";
res += " E,(HL)";
break;
case 0x5f: res="LD";
res += " E,A";
break;
case 0x60: res="LD";
res += " H,B";
break;
case 0x61: res="LD";
res += " H,C";
break;
case 0x62: res="LD";
res += " H,D";
break;
case 0x63: res="LD";
res += " H,E";
break;
case 0x64: res="LD";
res += " H,H";
break;
case 0x65: res="LD";
res += " H,L";
break;
case 0x66: res="LD";
res += " H,(HL)";
break;
case 0x67: res="LD";
res += " H,A";
break;
case 0x68: res="LD";
res += " L,B";
break;
case 0x69: res="LD";
res += " L,C";
break;
case 0x6a: res="LD";
res += " L,D";
break;
case 0x6b: res="LD";
res += " L,E";
break;
case 0x6c: res="LD";
res += " L,H";
break;
case 0x6d: res="LD";
res += " L,L";
break;
case 0x6e: res="LD";
res += " L,(HL)";
break;
case 0x6f: res="LD";
res += " L,A";
break;
case 0x70: res="LD";
res += " (HL),B";
break;
case 0x71: res="LD";
res += " (HL),C";
break;
case 0x72: res="LD";
res += " (HL),D";
break;
case 0x73: res="LD";
res += " (HL),E";
break;
case 0x74: res="LD";
res += " (HL),H";
break;
case 0x75: res="LD";
res += " (HL),L";
break;
case 0x76: res="HALT";
break;
case 0x77: res="LD";
res += " (HL),A";
break;
case 0x78: res="LD";
res += " A,B";
break;
case 0x79: res="LD";
res += " A,C";
break;
case 0x7a: res="LD";
res += " A,D";
break;
case 0x7b: res="LD";
res += " A,E";
break;
case 0x7c: res="LD";
res += " A,H";
break;
case 0x7d: res="LD";
res += " A,L";
break;
case 0x7e: res="LD";
res += " A,(HL)";
break;
case 0x7f: res="LD";
res += " A,A";
break;
case 0x80: res="ADD";
res += " A,B";
break;
case 0x81: res="ADD";
res += " A,C";
break;
case 0x82: res="ADD";
res += " A,D";
break;
case 0x83: res="ADD";
res += " A,E";
break;
case 0x84: res="ADD";
res += " A,H";
break;
case 0x85: res="ADD";
res += " A,L";
break;
case 0x86: res="ADD";
res += " A,(HL)";
break;
case 0x87: res="ADD";
res += " A,A";
break;
case 0x88: res="ADC";
res += " A,B";
break;
case 0x89: res="ADC";
res += " A,C";
break;
case 0x8a: res="ADC";
res += " A,D";
break;
case 0x8b: res="ADC";
res += " A,E";
break;
case 0x8c: res="ADC";
res += " A,H";
break;
case 0x8d: res="ADC";
res += " A,L";
break;
case 0x8e: res="ADC";
res += " A,(HL)";
break;
case 0x8f: res="ADC";
res += " A,A";
break;
case 0x90: res="SUB";
res += " A,B";
break;
case 0x91: res="SUB";
res += " A,C";
break;
case 0x92: res="SUB";
res += " A,D";
break;
case 0x93: res="SUB";
res += " A,E";
break;
case 0x94: res="SUB";
res += " A,H";
break;
case 0x95: res="SUB";
res += " A,L";
break;
case 0x96: res="SUB";
res += " A,(HL)";
break;
case 0x97: res="SUB";
res += " A,A";
break;
case 0x98: res="SBC";
res += " A,B";
break;
case 0x99: res="SBC";
res += " A,C";
break;
case 0x9a: res="SBC";
res += " A,D";
break;
case 0x9b: res="SBC";
res += " A,E";
break;
case 0x9c: res="SBC";
res += " A,H";
break;
case 0x9d: res="SBC";
res += " A,L";
break;
case 0x9e: res="SBC";
res += " A,(HL)";
break;
case 0x9f: res="SBC";
res += " A,A";
break;
case 0xa0: res="AND";
res += " A,B";
break;
case 0xa1: res="AND";
res += " A,C";
break;
case 0xa2: res="AND";
res += " A,D";
break;
case 0xa3: res="AND";
res += " A,E";
break;
case 0xa4: res="AND";
res += " A,H";
break;
case 0xa5: res="AND";
res += " A,L";
break;
case 0xa6: res="AND";
res += " A,(HL)";
break;
case 0xa7: res="AND";
res += " A,A";
break;
case 0xa8: res="XOR";
res += " A,B";
break;
case 0xa9: res="XOR";
res += " A,C";
break;
case 0xaa: res="XOR";
res += " A,D";
break;
case 0xab: res="XOR";
res += " A,E";
break;
case 0xac: res="XOR";
res += " A,H";
break;
case 0xad: res="XOR";
res += " A,L";
break;
case 0xae: res="XOR";
res += " A,(HL)";
break;
case 0xaf: res="XOR";
res += " A,A";
break;
case 0xb0: res="OR";
res += " A,B";
break;
case 0xb1: res="OR";
res += " A,C";
break;
case 0xb2: res="OR";
res += " A,D";
break;
case 0xb3: res="OR";
res += " A,E";
break;
case 0xb4: res="OR";
res += " A,H";
break;
case 0xb5: res="OR";
res += " A,L";
break;
case 0xb6: res="OR";
res += " A,(HL)";
break;
case 0xb7: res="OR";
res += " A,A";
break;
case 0xb8: res="CP";
res += " B";
break;
case 0xb9: res="CP";
res += " C";
break;
case 0xba: res="CP";
res += " D";
break;
case 0xbb: res="CP";
res += " E";
break;
case 0xbc: res="CP";
res += " H";
break;
case 0xbd: res="CP";
res += " L";
break;
case 0xbe: res="CP";
res += " (HL)";
break;
case 0xbf: res="CP";
res += " A";
break;
case 0xc0: res="RET";
res += " NZ";
break;
case 0xc1: res="POP";
res += " BC";
break;
case 0xc2: res="JP";
res += " NZ," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc3: res="JP";
res += " " + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc4: res="CALL";
res += " NZ," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xc5: res="PUSH";
res += " BC";
break;
case 0xc6: res="ADD";
res += " A,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xc7: res="RST";
res += " " + addressHtml(0x00);
break;
case 0xc8: res="RET";
res += " Z";
break;
case 0xc9: res="RET";
break;
case 0xca: res="JP";
res += " Z," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xcb: return disassemble_CB(address);
case 0xcc: res="CALL";
res += " Z," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xcd: res="CALL";
res += " " + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xce: res="ADC";
res += " A,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xcf: res="RST";
res += " " + addressHtml(0x8);
break;
case 0xd0: res="RET";
res += " NC";
break;
case 0xd1: res="POP";
res += " DE";
break;
case 0xd2: res="JP";
res += " NC," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xd3: res="OUT";
res += " (0x" + hexbyte(readbyte(address)) + "),A"; address += 1;
break;
case 0xd4: res="CALL";
res += " NC," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xd5: res="PUSH";
res += " DE";
break;
case 0xd6: res="SUB";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xd7: res="RST";
res += " " + addressHtml(0x10);
break;
case 0xd8: res="RET";
res += " C";
break;
case 0xd9: res="EXX";
break;
case 0xda: res="JP";
res += " C," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xdb: res="IN";
res += " A,(0x" + hexbyte(readbyte(address)) + ")"; address += 1;
break;
case 0xdc: res="CALL";
res += " C," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xdd: return disassemble_DD(address);
case 0xde: res="SBC";
res += " A,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xdf: res="RST";
res += " " + addressHtml(0x18);
break;
case 0xe0: res="RET";
res += " PO";
break;
case 0xe1: res="POP";
res += " HL";
break;
case 0xe2: res="JP";
res += " PO," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xe3: res="EX";
res += " (SP),HL";
break;
case 0xe4: res="CALL";
res += " PO," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xe5: res="PUSH";
res += " HL";
break;
case 0xe6: res="AND";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xe7: res="RST";
res += " " + addressHtml(0x20);
break;
case 0xe8: res="RET";
res += " PE";
break;
case 0xe9: res="JP";
res += " HL";
break;
case 0xea: res="JP";
res += " PE," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xeb: res="EX";
res += " DE,HL";
break;
case 0xec: res="CALL";
res += " PE," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xed: return disassemble_ED(address);
case 0xee: res="XOR";
res += " A,0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xef: res="RST";
res += " " + addressHtml(0x28);
break;
case 0xf0: res="RET";
res += " P";
break;
case 0xf1: res="POP";
res += " AF";
break;
case 0xf2: res="JP";
res += " P," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xf3: res="DI";
break;
case 0xf4: res="CALL";
res += " P," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xf5: res="PUSH";
res += " AF";
break;
case 0xf6: res="OR";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xf7: res="RST";
res += " " + addressHtml(0x30);
break;
case 0xf8: res="RET";
res += " M";
break;
case 0xf9: res="LD";
res += " SP,HL";
break;
case 0xfa: res="JP";
res += " M," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xfb: res="EI";
break;
case 0xfc: res="CALL";
res += " M," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0xfd: return disassemble_FD(address);
case 0xfe: res="CP";
res += " 0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0xff: res="RST";
res += " " + addressHtml(0x38);
break;
  }
  return [res, address];
}
function disassemble_CB(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="RLC";
res += " B";
break;
case 0x01: res="RLC";
res += " C";
break;
case 0x02: res="RLC";
res += " D";
break;
case 0x03: res="RLC";
res += " E";
break;
case 0x04: res="RLC";
res += " H";
break;
case 0x05: res="RLC";
res += " L";
break;
case 0x06: res="RLC";
res += " (HL)";
break;
case 0x07: res="RLC";
res += " A";
break;
case 0x08: res="RRC";
res += " B";
break;
case 0x09: res="RRC";
res += " C";
break;
case 0x0a: res="RRC";
res += " D";
break;
case 0x0b: res="RRC";
res += " E";
break;
case 0x0c: res="RRC";
res += " H";
break;
case 0x0d: res="RRC";
res += " L";
break;
case 0x0e: res="RRC";
res += " (HL)";
break;
case 0x0f: res="RRC";
res += " A";
break;
case 0x10: res="RL";
res += " B";
break;
case 0x11: res="RL";
res += " C";
break;
case 0x12: res="RL";
res += " D";
break;
case 0x13: res="RL";
res += " E";
break;
case 0x14: res="RL";
res += " H";
break;
case 0x15: res="RL";
res += " L";
break;
case 0x16: res="RL";
res += " (HL)";
break;
case 0x17: res="RL";
res += " A";
break;
case 0x18: res="RR";
res += " B";
break;
case 0x19: res="RR";
res += " C";
break;
case 0x1a: res="RR";
res += " D";
break;
case 0x1b: res="RR";
res += " E";
break;
case 0x1c: res="RR";
res += " H";
break;
case 0x1d: res="RR";
res += " L";
break;
case 0x1e: res="RR";
res += " (HL)";
break;
case 0x1f: res="RR";
res += " A";
break;
case 0x20: res="SLA";
res += " B";
break;
case 0x21: res="SLA";
res += " C";
break;
case 0x22: res="SLA";
res += " D";
break;
case 0x23: res="SLA";
res += " E";
break;
case 0x24: res="SLA";
res += " H";
break;
case 0x25: res="SLA";
res += " L";
break;
case 0x26: res="SLA";
res += " (HL)";
break;
case 0x27: res="SLA";
res += " A";
break;
case 0x28: res="SRA";
res += " B";
break;
case 0x29: res="SRA";
res += " C";
break;
case 0x2a: res="SRA";
res += " D";
break;
case 0x2b: res="SRA";
res += " E";
break;
case 0x2c: res="SRA";
res += " H";
break;
case 0x2d: res="SRA";
res += " L";
break;
case 0x2e: res="SRA";
res += " (HL)";
break;
case 0x2f: res="SRA";
res += " A";
break;
case 0x30: res="SLL";
res += " B";
break;
case 0x31: res="SLL";
res += " C";
break;
case 0x32: res="SLL";
res += " D";
break;
case 0x33: res="SLL";
res += " E";
break;
case 0x34: res="SLL";
res += " H";
break;
case 0x35: res="SLL";
res += " L";
break;
case 0x36: res="SLL";
res += " (HL)";
break;
case 0x37: res="SLL";
res += " A";
break;
case 0x38: res="SRL";
res += " B";
break;
case 0x39: res="SRL";
res += " C";
break;
case 0x3a: res="SRL";
res += " D";
break;
case 0x3b: res="SRL";
res += " E";
break;
case 0x3c: res="SRL";
res += " H";
break;
case 0x3d: res="SRL";
res += " L";
break;
case 0x3e: res="SRL";
res += " (HL)";
break;
case 0x3f: res="SRL";
res += " A";
break;
case 0x40: res="BIT";
res += " 0,B";
break;
case 0x41: res="BIT";
res += " 0,C";
break;
case 0x42: res="BIT";
res += " 0,D";
break;
case 0x43: res="BIT";
res += " 0,E";
break;
case 0x44: res="BIT";
res += " 0,H";
break;
case 0x45: res="BIT";
res += " 0,L";
break;
case 0x46: res="BIT";
res += " 0,(HL)";
break;
case 0x47: res="BIT";
res += " 0,A";
break;
case 0x48: res="BIT";
res += " 1,B";
break;
case 0x49: res="BIT";
res += " 1,C";
break;
case 0x4a: res="BIT";
res += " 1,D";
break;
case 0x4b: res="BIT";
res += " 1,E";
break;
case 0x4c: res="BIT";
res += " 1,H";
break;
case 0x4d: res="BIT";
res += " 1,L";
break;
case 0x4e: res="BIT";
res += " 1,(HL)";
break;
case 0x4f: res="BIT";
res += " 1,A";
break;
case 0x50: res="BIT";
res += " 2,B";
break;
case 0x51: res="BIT";
res += " 2,C";
break;
case 0x52: res="BIT";
res += " 2,D";
break;
case 0x53: res="BIT";
res += " 2,E";
break;
case 0x54: res="BIT";
res += " 2,H";
break;
case 0x55: res="BIT";
res += " 2,L";
break;
case 0x56: res="BIT";
res += " 2,(HL)";
break;
case 0x57: res="BIT";
res += " 2,A";
break;
case 0x58: res="BIT";
res += " 3,B";
break;
case 0x59: res="BIT";
res += " 3,C";
break;
case 0x5a: res="BIT";
res += " 3,D";
break;
case 0x5b: res="BIT";
res += " 3,E";
break;
case 0x5c: res="BIT";
res += " 3,H";
break;
case 0x5d: res="BIT";
res += " 3,L";
break;
case 0x5e: res="BIT";
res += " 3,(HL)";
break;
case 0x5f: res="BIT";
res += " 3,A";
break;
case 0x60: res="BIT";
res += " 4,B";
break;
case 0x61: res="BIT";
res += " 4,C";
break;
case 0x62: res="BIT";
res += " 4,D";
break;
case 0x63: res="BIT";
res += " 4,E";
break;
case 0x64: res="BIT";
res += " 4,H";
break;
case 0x65: res="BIT";
res += " 4,L";
break;
case 0x66: res="BIT";
res += " 4,(HL)";
break;
case 0x67: res="BIT";
res += " 4,A";
break;
case 0x68: res="BIT";
res += " 5,B";
break;
case 0x69: res="BIT";
res += " 5,C";
break;
case 0x6a: res="BIT";
res += " 5,D";
break;
case 0x6b: res="BIT";
res += " 5,E";
break;
case 0x6c: res="BIT";
res += " 5,H";
break;
case 0x6d: res="BIT";
res += " 5,L";
break;
case 0x6e: res="BIT";
res += " 5,(HL)";
break;
case 0x6f: res="BIT";
res += " 5,A";
break;
case 0x70: res="BIT";
res += " 6,B";
break;
case 0x71: res="BIT";
res += " 6,C";
break;
case 0x72: res="BIT";
res += " 6,D";
break;
case 0x73: res="BIT";
res += " 6,E";
break;
case 0x74: res="BIT";
res += " 6,H";
break;
case 0x75: res="BIT";
res += " 6,L";
break;
case 0x76: res="BIT";
res += " 6,(HL)";
break;
case 0x77: res="BIT";
res += " 6,A";
break;
case 0x78: res="BIT";
res += " 7,B";
break;
case 0x79: res="BIT";
res += " 7,C";
break;
case 0x7a: res="BIT";
res += " 7,D";
break;
case 0x7b: res="BIT";
res += " 7,E";
break;
case 0x7c: res="BIT";
res += " 7,H";
break;
case 0x7d: res="BIT";
res += " 7,L";
break;
case 0x7e: res="BIT";
res += " 7,(HL)";
break;
case 0x7f: res="BIT";
res += " 7,A";
break;
case 0x80: res="RES";
res += " 0,B";
break;
case 0x81: res="RES";
res += " 0,C";
break;
case 0x82: res="RES";
res += " 0,D";
break;
case 0x83: res="RES";
res += " 0,E";
break;
case 0x84: res="RES";
res += " 0,H";
break;
case 0x85: res="RES";
res += " 0,L";
break;
case 0x86: res="RES";
res += " 0,(HL)";
break;
case 0x87: res="RES";
res += " 0,A";
break;
case 0x88: res="RES";
res += " 1,B";
break;
case 0x89: res="RES";
res += " 1,C";
break;
case 0x8a: res="RES";
res += " 1,D";
break;
case 0x8b: res="RES";
res += " 1,E";
break;
case 0x8c: res="RES";
res += " 1,H";
break;
case 0x8d: res="RES";
res += " 1,L";
break;
case 0x8e: res="RES";
res += " 1,(HL)";
break;
case 0x8f: res="RES";
res += " 1,A";
break;
case 0x90: res="RES";
res += " 2,B";
break;
case 0x91: res="RES";
res += " 2,C";
break;
case 0x92: res="RES";
res += " 2,D";
break;
case 0x93: res="RES";
res += " 2,E";
break;
case 0x94: res="RES";
res += " 2,H";
break;
case 0x95: res="RES";
res += " 2,L";
break;
case 0x96: res="RES";
res += " 2,(HL)";
break;
case 0x97: res="RES";
res += " 2,A";
break;
case 0x98: res="RES";
res += " 3,B";
break;
case 0x99: res="RES";
res += " 3,C";
break;
case 0x9a: res="RES";
res += " 3,D";
break;
case 0x9b: res="RES";
res += " 3,E";
break;
case 0x9c: res="RES";
res += " 3,H";
break;
case 0x9d: res="RES";
res += " 3,L";
break;
case 0x9e: res="RES";
res += " 3,(HL)";
break;
case 0x9f: res="RES";
res += " 3,A";
break;
case 0xa0: res="RES";
res += " 4,B";
break;
case 0xa1: res="RES";
res += " 4,C";
break;
case 0xa2: res="RES";
res += " 4,D";
break;
case 0xa3: res="RES";
res += " 4,E";
break;
case 0xa4: res="RES";
res += " 4,H";
break;
case 0xa5: res="RES";
res += " 4,L";
break;
case 0xa6: res="RES";
res += " 4,(HL)";
break;
case 0xa7: res="RES";
res += " 4,A";
break;
case 0xa8: res="RES";
res += " 5,B";
break;
case 0xa9: res="RES";
res += " 5,C";
break;
case 0xaa: res="RES";
res += " 5,D";
break;
case 0xab: res="RES";
res += " 5,E";
break;
case 0xac: res="RES";
res += " 5,H";
break;
case 0xad: res="RES";
res += " 5,L";
break;
case 0xae: res="RES";
res += " 5,(HL)";
break;
case 0xaf: res="RES";
res += " 5,A";
break;
case 0xb0: res="RES";
res += " 6,B";
break;
case 0xb1: res="RES";
res += " 6,C";
break;
case 0xb2: res="RES";
res += " 6,D";
break;
case 0xb3: res="RES";
res += " 6,E";
break;
case 0xb4: res="RES";
res += " 6,H";
break;
case 0xb5: res="RES";
res += " 6,L";
break;
case 0xb6: res="RES";
res += " 6,(HL)";
break;
case 0xb7: res="RES";
res += " 6,A";
break;
case 0xb8: res="RES";
res += " 7,B";
break;
case 0xb9: res="RES";
res += " 7,C";
break;
case 0xba: res="RES";
res += " 7,D";
break;
case 0xbb: res="RES";
res += " 7,E";
break;
case 0xbc: res="RES";
res += " 7,H";
break;
case 0xbd: res="RES";
res += " 7,L";
break;
case 0xbe: res="RES";
res += " 7,(HL)";
break;
case 0xbf: res="RES";
res += " 7,A";
break;
case 0xc0: res="SET";
res += " 0,B";
break;
case 0xc1: res="SET";
res += " 0,C";
break;
case 0xc2: res="SET";
res += " 0,D";
break;
case 0xc3: res="SET";
res += " 0,E";
break;
case 0xc4: res="SET";
res += " 0,H";
break;
case 0xc5: res="SET";
res += " 0,L";
break;
case 0xc6: res="SET";
res += " 0,(HL)";
break;
case 0xc7: res="SET";
res += " 0,A";
break;
case 0xc8: res="SET";
res += " 1,B";
break;
case 0xc9: res="SET";
res += " 1,C";
break;
case 0xca: res="SET";
res += " 1,D";
break;
case 0xcb: res="SET";
res += " 1,E";
break;
case 0xcc: res="SET";
res += " 1,H";
break;
case 0xcd: res="SET";
res += " 1,L";
break;
case 0xce: res="SET";
res += " 1,(HL)";
break;
case 0xcf: res="SET";
res += " 1,A";
break;
case 0xd0: res="SET";
res += " 2,B";
break;
case 0xd1: res="SET";
res += " 2,C";
break;
case 0xd2: res="SET";
res += " 2,D";
break;
case 0xd3: res="SET";
res += " 2,E";
break;
case 0xd4: res="SET";
res += " 2,H";
break;
case 0xd5: res="SET";
res += " 2,L";
break;
case 0xd6: res="SET";
res += " 2,(HL)";
break;
case 0xd7: res="SET";
res += " 2,A";
break;
case 0xd8: res="SET";
res += " 3,B";
break;
case 0xd9: res="SET";
res += " 3,C";
break;
case 0xda: res="SET";
res += " 3,D";
break;
case 0xdb: res="SET";
res += " 3,E";
break;
case 0xdc: res="SET";
res += " 3,H";
break;
case 0xdd: res="SET";
res += " 3,L";
break;
case 0xde: res="SET";
res += " 3,(HL)";
break;
case 0xdf: res="SET";
res += " 3,A";
break;
case 0xe0: res="SET";
res += " 4,B";
break;
case 0xe1: res="SET";
res += " 4,C";
break;
case 0xe2: res="SET";
res += " 4,D";
break;
case 0xe3: res="SET";
res += " 4,E";
break;
case 0xe4: res="SET";
res += " 4,H";
break;
case 0xe5: res="SET";
res += " 4,L";
break;
case 0xe6: res="SET";
res += " 4,(HL)";
break;
case 0xe7: res="SET";
res += " 4,A";
break;
case 0xe8: res="SET";
res += " 5,B";
break;
case 0xe9: res="SET";
res += " 5,C";
break;
case 0xea: res="SET";
res += " 5,D";
break;
case 0xeb: res="SET";
res += " 5,E";
break;
case 0xec: res="SET";
res += " 5,H";
break;
case 0xed: res="SET";
res += " 5,L";
break;
case 0xee: res="SET";
res += " 5,(HL)";
break;
case 0xef: res="SET";
res += " 5,A";
break;
case 0xf0: res="SET";
res += " 6,B";
break;
case 0xf1: res="SET";
res += " 6,C";
break;
case 0xf2: res="SET";
res += " 6,D";
break;
case 0xf3: res="SET";
res += " 6,E";
break;
case 0xf4: res="SET";
res += " 6,H";
break;
case 0xf5: res="SET";
res += " 6,L";
break;
case 0xf6: res="SET";
res += " 6,(HL)";
break;
case 0xf7: res="SET";
res += " 6,A";
break;
case 0xf8: res="SET";
res += " 7,B";
break;
case 0xf9: res="SET";
res += " 7,C";
break;
case 0xfa: res="SET";
res += " 7,D";
break;
case 0xfb: res="SET";
res += " 7,E";
break;
case 0xfc: res="SET";
res += " 7,H";
break;
case 0xfd: res="SET";
res += " 7,L";
break;
case 0xfe: res="SET";
res += " 7,(HL)";
break;
case 0xff: res="SET";
res += " 7,A";
break;
  }
  return [res, address];
}
function disassemble_ED(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x40: res="IN";
res += " B,(C)";
break;
case 0x41: res="OUT";
res += " (C),B";
break;
case 0x42: res="SBC";
res += " HL,BC";
break;
case 0x43: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),BC"; address += 2;
break;
case 0x44:
case 0x4c:
case 0x54:
case 0x5c:
case 0x64:
case 0x6c:
case 0x74:
case 0x7c: res="NEG";
break;
case 0x45:
case 0x4d:
case 0x55:
case 0x5d:
case 0x65:
case 0x6d:
case 0x75:
case 0x7d: res="RETN";
break;
case 0x46:
case 0x4e:
case 0x66:
case 0x6e: res="IM";
res += " 0";
break;
case 0x47: res="LD";
res += " I,A";
break;
case 0x48: res="IN";
res += " C,(C)";
break;
case 0x49: res="OUT";
res += " (C),C";
break;
case 0x4a: res="ADC";
res += " HL,BC";
break;
case 0x4b: res="LD";
res += " BC,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x4f: res="LD";
res += " R,A";
break;
case 0x50: res="IN";
res += " D,(C)";
break;
case 0x51: res="OUT";
res += " (C),D";
break;
case 0x52: res="SBC";
res += " HL,DE";
break;
case 0x53: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),DE"; address += 2;
break;
case 0x56:
case 0x76: res="IM";
res += " 1";
break;
case 0x57: res="LD";
res += " A,I";
break;
case 0x58: res="IN";
res += " E,(C)";
break;
case 0x59: res="OUT";
res += " (C),E";
break;
case 0x5a: res="ADC";
res += " HL,DE";
break;
case 0x5b: res="LD";
res += " DE,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x5e:
case 0x7e: res="IM";
res += " 2";
break;
case 0x5f: res="LD";
res += " A,R";
break;
case 0x60: res="IN";
res += " H,(C)";
break;
case 0x61: res="OUT";
res += " (C),H";
break;
case 0x62: res="SBC";
res += " HL,HL";
break;
case 0x63: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),HL"; address += 2;
break;
case 0x67: res="RRD";
break;
case 0x68: res="IN";
res += " L,(C)";
break;
case 0x69: res="OUT";
res += " (C),L";
break;
case 0x6a: res="ADC";
res += " HL,HL";
break;
case 0x6b: res="LD";
res += " HL,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x6f: res="RLD";
break;
case 0x70: res="IN";
res += " F,(C)";
break;
case 0x71: res="OUT";
res += " (C),0";
break;
case 0x72: res="SBC";
res += " HL,SP";
break;
case 0x73: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),SP"; address += 2;
break;
case 0x78: res="IN";
res += " A,(C)";
break;
case 0x79: res="OUT";
res += " (C),A";
break;
case 0x7a: res="ADC";
res += " HL,SP";
break;
case 0x7b: res="LD";
res += " SP,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0xa0: res="LDI";
break;
case 0xa1: res="CPI";
break;
case 0xa2: res="INI";
break;
case 0xa3: res="OUTI";
break;
case 0xa8: res="LDD";
break;
case 0xa9: res="CPD";
break;
case 0xaa: res="IND";
break;
case 0xab: res="OUTD";
break;
case 0xb0: res="LDIR";
break;
case 0xb1: res="CPIR";
break;
case 0xb2: res="INIR";
break;
case 0xb3: res="OTIR";
break;
case 0xb8: res="LDDR";
break;
case 0xb9: res="CPDR";
break;
case 0xba: res="INDR";
break;
case 0xbb: res="OTDR";
break;
  }
  return [res, address];
}
var dis_REGISTER;
function disassemble_DD(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  dis_REGISTER = "IX";
  switch (opcode) {
case 0x09: res="ADD";
res += " " + dis_REGISTER + ",BC";
break;
case 0x19: res="ADD";
res += " " + dis_REGISTER + ",DE";
break;
case 0x21: res="LD";
res += " " + dis_REGISTER + "," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")," + dis_REGISTER + ""; address += 2;
break;
case 0x23: res="INC";
res += " " + dis_REGISTER + "";
break;
case 0x24: res="INC";
res += " " + dis_REGISTER + "H" + "";
break;
case 0x25: res="DEC";
res += " " + dis_REGISTER + "H" + "";
break;
case 0x26: res="LD";
res += " " + dis_REGISTER + "H" + ",0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x29: res="ADD";
res += " " + dis_REGISTER + "," + dis_REGISTER + "";
break;
case 0x2a: res="LD";
res += " " + dis_REGISTER + ",(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="DEC";
res += " " + dis_REGISTER + "";
break;
case 0x2c: res="INC";
res += " " + dis_REGISTER + "L" + "";
break;
case 0x2d: res="DEC";
res += " " + dis_REGISTER + "L" + "";
break;
case 0x2e: res="LD";
res += " " + dis_REGISTER + "L" + ",0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x34: res="INC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="DEC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="LD";
res += " (" + dis_REGISTER + "+dd),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x39: res="ADD";
res += " " + dis_REGISTER + ",SP";
break;
case 0x44: res="LD";
res += " B," + dis_REGISTER + "H" + "";
break;
case 0x45: res="LD";
res += " B," + dis_REGISTER + "L" + "";
break;
case 0x46: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x4c: res="LD";
res += " C," + dis_REGISTER + "H" + "";
break;
case 0x4d: res="LD";
res += " C," + dis_REGISTER + "L" + "";
break;
case 0x4e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x54: res="LD";
res += " D," + dis_REGISTER + "H" + "";
break;
case 0x55: res="LD";
res += " D," + dis_REGISTER + "L" + "";
break;
case 0x56: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x5c: res="LD";
res += " E," + dis_REGISTER + "H" + "";
break;
case 0x5d: res="LD";
res += " E," + dis_REGISTER + "L" + "";
break;
case 0x5e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60: res="LD";
res += " " + dis_REGISTER + "H" + ",B";
break;
case 0x61: res="LD";
res += " " + dis_REGISTER + "H" + ",C";
break;
case 0x62: res="LD";
res += " " + dis_REGISTER + "H" + ",D";
break;
case 0x63: res="LD";
res += " " + dis_REGISTER + "H" + ",E";
break;
case 0x64: res="LD";
res += " " + dis_REGISTER + "H" + "," + dis_REGISTER + "H" + "";
break;
case 0x65: res="LD";
res += " " + dis_REGISTER + "H" + "," + dis_REGISTER + "L" + "";
break;
case 0x66: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x67: res="LD";
res += " " + dis_REGISTER + "H" + ",A";
break;
case 0x68: res="LD";
res += " " + dis_REGISTER + "L" + ",B";
break;
case 0x69: res="LD";
res += " " + dis_REGISTER + "L" + ",C";
break;
case 0x6a: res="LD";
res += " " + dis_REGISTER + "L" + ",D";
break;
case 0x6b: res="LD";
res += " " + dis_REGISTER + "L" + ",E";
break;
case 0x6c: res="LD";
res += " " + dis_REGISTER + "L" + "," + dis_REGISTER + "H" + "";
break;
case 0x6d: res="LD";
res += " " + dis_REGISTER + "L" + "," + dis_REGISTER + "L" + "";
break;
case 0x6e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x6f: res="LD";
res += " " + dis_REGISTER + "L" + ",A";
break;
case 0x70: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),B"; address += 1;
break;
case 0x71: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),C"; address += 1;
break;
case 0x72: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),D"; address += 1;
break;
case 0x73: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),E"; address += 1;
break;
case 0x74: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),H"; address += 1;
break;
case 0x75: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),L"; address += 1;
break;
case 0x77: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),A"; address += 1;
break;
case 0x7c: res="LD";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x7d: res="LD";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x7e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="ADD";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x85: res="ADD";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x86: res="ADD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="ADC";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x8d: res="ADC";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x8e: res="ADC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="SUB";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x95: res="SUB";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x96: res="SUB";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="SBC";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x9d: res="SBC";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x9e: res="SBC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="AND";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xa5: res="AND";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xa6: res="AND";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="XOR";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xad: res="XOR";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xae: res="XOR";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="OR";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xb5: res="OR";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xb6: res="OR";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="CP";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xbd: res="CP";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xbe: res="CP";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: return disassemble_DDFDCB(address);
case 0xe1: res="POP";
res += " " + dis_REGISTER + "";
break;
case 0xe3: res="EX";
res += " (SP)," + dis_REGISTER + "";
break;
case 0xe5: res="PUSH";
res += " " + dis_REGISTER + "";
break;
case 0xe9: res="JP";
res += " " + dis_REGISTER + "";
break;
case 0xf9: res="LD";
res += " SP," + dis_REGISTER + "";
break;
  }
  return [res, address];
}
function disassemble_FD(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  dis_REGISTER = "IY";
  switch (opcode) {
case 0x09: res="ADD";
res += " " + dis_REGISTER + ",BC";
break;
case 0x19: res="ADD";
res += " " + dis_REGISTER + ",DE";
break;
case 0x21: res="LD";
res += " " + dis_REGISTER + "," + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ""; address += 2;
break;
case 0x22: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")," + dis_REGISTER + ""; address += 2;
break;
case 0x23: res="INC";
res += " " + dis_REGISTER + "";
break;
case 0x24: res="INC";
res += " " + dis_REGISTER + "H" + "";
break;
case 0x25: res="DEC";
res += " " + dis_REGISTER + "H" + "";
break;
case 0x26: res="LD";
res += " " + dis_REGISTER + "H" + ",0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x29: res="ADD";
res += " " + dis_REGISTER + "," + dis_REGISTER + "";
break;
case 0x2a: res="LD";
res += " " + dis_REGISTER + ",(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x2b: res="DEC";
res += " " + dis_REGISTER + "";
break;
case 0x2c: res="INC";
res += " " + dis_REGISTER + "L" + "";
break;
case 0x2d: res="DEC";
res += " " + dis_REGISTER + "L" + "";
break;
case 0x2e: res="LD";
res += " " + dis_REGISTER + "L" + ",0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x34: res="INC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="DEC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="LD";
res += " (" + dis_REGISTER + "+dd),0x" + hexbyte(readbyte(address)) + ""; address += 1;
break;
case 0x39: res="ADD";
res += " " + dis_REGISTER + ",SP";
break;
case 0x44: res="LD";
res += " B," + dis_REGISTER + "H" + "";
break;
case 0x45: res="LD";
res += " B," + dis_REGISTER + "L" + "";
break;
case 0x46: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x4c: res="LD";
res += " C," + dis_REGISTER + "H" + "";
break;
case 0x4d: res="LD";
res += " C," + dis_REGISTER + "L" + "";
break;
case 0x4e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x54: res="LD";
res += " D," + dis_REGISTER + "H" + "";
break;
case 0x55: res="LD";
res += " D," + dis_REGISTER + "L" + "";
break;
case 0x56: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x5c: res="LD";
res += " E," + dis_REGISTER + "H" + "";
break;
case 0x5d: res="LD";
res += " E," + dis_REGISTER + "L" + "";
break;
case 0x5e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60: res="LD";
res += " " + dis_REGISTER + "H" + ",B";
break;
case 0x61: res="LD";
res += " " + dis_REGISTER + "H" + ",C";
break;
case 0x62: res="LD";
res += " " + dis_REGISTER + "H" + ",D";
break;
case 0x63: res="LD";
res += " " + dis_REGISTER + "H" + ",E";
break;
case 0x64: res="LD";
res += " " + dis_REGISTER + "H" + "," + dis_REGISTER + "H" + "";
break;
case 0x65: res="LD";
res += " " + dis_REGISTER + "H" + "," + dis_REGISTER + "L" + "";
break;
case 0x66: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x67: res="LD";
res += " " + dis_REGISTER + "H" + ",A";
break;
case 0x68: res="LD";
res += " " + dis_REGISTER + "L" + ",B";
break;
case 0x69: res="LD";
res += " " + dis_REGISTER + "L" + ",C";
break;
case 0x6a: res="LD";
res += " " + dis_REGISTER + "L" + ",D";
break;
case 0x6b: res="LD";
res += " " + dis_REGISTER + "L" + ",E";
break;
case 0x6c: res="LD";
res += " " + dis_REGISTER + "L" + "," + dis_REGISTER + "H" + "";
break;
case 0x6d: res="LD";
res += " " + dis_REGISTER + "L" + "," + dis_REGISTER + "L" + "";
break;
case 0x6e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x6f: res="LD";
res += " " + dis_REGISTER + "L" + ",A";
break;
case 0x70: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),B"; address += 1;
break;
case 0x71: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),C"; address += 1;
break;
case 0x72: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),D"; address += 1;
break;
case 0x73: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),E"; address += 1;
break;
case 0x74: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),H"; address += 1;
break;
case 0x75: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),L"; address += 1;
break;
case 0x77: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + "),A"; address += 1;
break;
case 0x7c: res="LD";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x7d: res="LD";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x7e: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="ADD";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x85: res="ADD";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x86: res="ADD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="ADC";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x8d: res="ADC";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x8e: res="ADC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="SUB";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x95: res="SUB";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x96: res="SUB";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="SBC";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0x9d: res="SBC";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0x9e: res="SBC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="AND";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xa5: res="AND";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xa6: res="AND";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="XOR";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xad: res="XOR";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xae: res="XOR";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="OR";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xb5: res="OR";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xb6: res="OR";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="CP";
res += " A," + dis_REGISTER + "H" + "";
break;
case 0xbd: res="CP";
res += " A," + dis_REGISTER + "L" + "";
break;
case 0xbe: res="CP";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: return disassemble_DDFDCB(address);
case 0xe1: res="POP";
res += " " + dis_REGISTER + "";
break;
case 0xe3: res="EX";
res += " (SP)," + dis_REGISTER + "";
break;
case 0xe5: res="PUSH";
res += " " + dis_REGISTER + "";
break;
case 0xe9: res="JP";
res += " " + dis_REGISTER + "";
break;
case 0xf9: res="LD";
res += " SP," + dis_REGISTER + "";
break;
  }
  return [res, address];
}
function disassemble_DDFDCB(address) {
  opcode = readbyte(address);
  address++;
  var res = "??";
  switch (opcode) {
case 0x00: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x01: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x02: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x03: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x04: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x05: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x06: res="RLC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x07: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RLC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x08: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x09: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0e: res="RRC";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x0f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RRC (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x10: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x11: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x12: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x13: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x14: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x15: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x16: res="RL";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x17: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x18: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x19: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1e: res="RR";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x1f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RR (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x20: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x21: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x22: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x23: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x24: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x25: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x26: res="SLA";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x27: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SLA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x28: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x29: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2e: res="SRA";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x2f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SRA (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x30: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x31: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x32: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x33: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x34: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x35: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x36: res="SLL";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x37: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SLL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x38: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x39: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3e: res="SRL";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x3f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SRL (" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x40:
case 0x41:
case 0x42:
case 0x43:
case 0x44:
case 0x45:
case 0x46:
case 0x47: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x48:
case 0x49:
case 0x4a:
case 0x4b:
case 0x4c:
case 0x4d:
case 0x4e:
case 0x4f: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x50:
case 0x51:
case 0x52:
case 0x53:
case 0x54:
case 0x55:
case 0x56:
case 0x57: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x58:
case 0x59:
case 0x5a:
case 0x5b:
case 0x5c:
case 0x5d:
case 0x5e:
case 0x5f: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x60:
case 0x61:
case 0x62:
case 0x63:
case 0x64:
case 0x65:
case 0x66:
case 0x67: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x68:
case 0x69:
case 0x6a:
case 0x6b:
case 0x6c:
case 0x6d:
case 0x6e:
case 0x6f: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x70:
case 0x71:
case 0x72:
case 0x73:
case 0x74:
case 0x75:
case 0x76:
case 0x77: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x78:
case 0x79:
case 0x7a:
case 0x7b:
case 0x7c:
case 0x7d:
case 0x7e:
case 0x7f: res="BIT";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x80: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x81: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x82: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x83: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x84: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x85: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x86: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x87: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x88: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x89: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8e: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x8f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x90: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x91: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x92: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x93: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x94: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x95: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x96: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x97: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x98: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x99: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9a: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9b: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9c: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9d: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9e: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0x9f: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa6: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xa9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xaa: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xab: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xac: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xad: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xae: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xaf: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb6: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xb9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xba: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbb: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbc: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbd: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbe: res="RES";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xbf: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,RES 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc6: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 0,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xc9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xca: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcb: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcc: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcd: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xce: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xcf: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 1,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd6: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 2,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xd9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xda: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdb: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdc: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdd: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xde: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xdf: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 3,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe6: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 4,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xe9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xea: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xeb: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xec: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xed: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xee: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xef: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 5,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf0: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf1: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf2: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf3: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf4: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf5: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf6: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf7: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 6,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf8: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " B,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xf9: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " C,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfa: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " D,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfb: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " E,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfc: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " H,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfd: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " L,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xfe: res="SET";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
case 0xff: res="LD";
var offset = sign_extend(readbyte(address));
var sign = offset > 0 ? "+" : "-";
res += " A,SET 7,(" + dis_REGISTER + "" + sign + "0x" + hexbyte(offset) + ")"; address += 1;
break;
  }
  return [res, address];
}